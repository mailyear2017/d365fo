Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.ird_speaker_ID(1)
    
    // Data source buffers
    ird_speaker m_ird_speaker;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('ird_speaker'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [ird_speaker]
            if(!this.preSaveDataSource(_entityCtx, 'ird_speaker'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('ird_speaker');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // inserts/updates data source [ird_speaker].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [ird_speaker]
            if(!this.preSaveDataSource(_entityCtx, 'ird_speaker'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('ird_speaker');
            // deletes data source [ird_speaker].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, ird_speaker _ird_speaker, Speaker _speaker)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _speaker, fieldnum(Speaker, SpeakerStatus), _ird_speaker, fieldnum(ird_speaker, SpeakerStatus), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _speaker, fieldnum(Speaker, FirstName), _ird_speaker, fieldnum(ird_speaker, FirstName), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _speaker, fieldnum(Speaker, LastName), _ird_speaker, fieldnum(ird_speaker, LastName), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _speaker, fieldnum(Speaker, Email), _ird_speaker, fieldnum(ird_speaker, Email), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _speaker, fieldnum(Speaker, SpeakerSpecialization), _ird_speaker, fieldnum(ird_speaker, SpeakerSpecialization), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _ird_speaker, _speaker);
        _ird_speaker.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #ird_speaker_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, ird_speaker _ird_speaker, Speaker _speaker)
    {
        this.mapDataSourceFieldToEntityField(_ird_speaker, fieldnum(ird_speaker, SpeakerStatus), _speaker, fieldnum(Speaker, SpeakerStatus), false);
        this.mapDataSourceFieldToEntityField(_ird_speaker, fieldnum(ird_speaker, FirstName), _speaker, fieldnum(Speaker, FirstName), false);
        this.mapDataSourceFieldToEntityField(_ird_speaker, fieldnum(ird_speaker, LastName), _speaker, fieldnum(Speaker, LastName), false);
        this.mapDataSourceFieldToEntityField(_ird_speaker, fieldnum(ird_speaker, Email), _speaker, fieldnum(Speaker, Email), false);
        this.mapDataSourceFieldToEntityField(_ird_speaker, fieldnum(ird_speaker, SpeakerSpecialization), _speaker, fieldnum(Speaker, SpeakerSpecialization), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _ird_speaker, _speaker);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _speaker.fromViewDataSource(_dataSourceCtx.id(), _ird_speaker);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #ird_speaker_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #ird_speaker_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(Speaker _speaker, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_speaker.isFieldSet(fieldnum(Speaker, SpeakerStatus)))
        {
            return true;
        }
        if(_speaker.isFieldSet(fieldnum(Speaker, FirstName)))
        {
            return true;
        }
        if(_speaker.isFieldSet(fieldnum(Speaker, LastName)))
        {
            return true;
        }
        if(_speaker.isFieldSet(fieldnum(Speaker, Email)))
        {
            return true;
        }
        if(_speaker.isFieldSet(fieldnum(Speaker, SpeakerSpecialization)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceExtensionFieldSet(_speaker, 'ird_speaker', disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #ird_speaker_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, Speaker _speaker, DataEntityDataSourceRuntimeContext _dataSourceCtx, ird_speaker _ird_speaker)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _speaker, fieldnum(Speaker, SpeakerStatus), 'Speaker.SpeakerStatus', _ird_speaker, fieldnum(ird_speaker, SpeakerStatus), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _speaker, fieldnum(Speaker, FirstName), 'Speaker.FirstName', _ird_speaker, fieldnum(ird_speaker, FirstName), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _speaker, fieldnum(Speaker, LastName), 'Speaker.LastName', _ird_speaker, fieldnum(ird_speaker, LastName), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _speaker, fieldnum(Speaker, Email), 'Speaker.Email', _ird_speaker, fieldnum(ird_speaker, Email), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _speaker, fieldnum(Speaker, SpeakerSpecialization), 'Speaker.SpeakerSpecialization', _ird_speaker, fieldnum(ird_speaker, SpeakerSpecialization), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _speaker, _dataSourceCtx, _ird_speaker) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #ird_speaker_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, ird_speaker _ird_speaker, ird_speaker _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _ird_speaker, fieldnum(ird_speaker, SpeakerStatus), _matchingRecord, fieldnum(ird_speaker, SpeakerStatus), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _ird_speaker, fieldnum(ird_speaker, FirstName), _matchingRecord, fieldnum(ird_speaker, FirstName), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _ird_speaker, fieldnum(ird_speaker, LastName), _matchingRecord, fieldnum(ird_speaker, LastName), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _ird_speaker, fieldnum(ird_speaker, Email), _matchingRecord, fieldnum(ird_speaker, Email), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _ird_speaker, fieldnum(ird_speaker, SpeakerSpecialization), _matchingRecord, fieldnum(ird_speaker, SpeakerSpecialization), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(Speaker), _ird_speaker, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #ird_speaker_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'ird_speaker', m_ird_speaker, this.getDataSourceId('ird_speaker'), this.getDataSourceRuntimeId('ird_speaker'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private ird_speaker LookForUniqueKeyMatch_DS1(Speaker _speaker, ird_speaker _ird_speaker)
    {
        ird_speaker ird_speaker_ = null;
        
        select
            forUpdate
            firstOnly
                ird_speaker_
        where
            ird_speaker_.Email == _ird_speaker.Email
        ;
        
        if (ird_speaker_)
        {
            return ird_speaker_;
        }
        
        return ird_speaker_;
    }

}

